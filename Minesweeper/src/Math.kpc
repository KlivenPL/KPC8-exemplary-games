*@module Math
    .exportregion mul
    .exportregion mul16
    .exportregion div
    .exportregion div16
    .exportregion getRandomValue
    .exportregion random
    .exportregion srl16
    .exportregion binToDec

*random
    .defnum seedPtr 0x08

// $a1 = numA
// $a2 = numB
*mul
    .defreg rA $t1 // byte
    .defreg rB $t2 // byte
    .defreg rResult $t3
    
    :main
        pushw $t1 $sp
        pushw $t2 $sp
        pushw $t3 $sp

       // .debugwrite "DEBUG WRITE XDDDD rA: {rA} $a1: {$a1}"
        set rA $a1
       // .debugwrite "DEBUG WRITE XDDDD rA: {rA} $a1: {$a1}"
      //  .debugwrite "[{%time%}] ram at 2: {%ram(2)%}, ram at sp: {%ram($sp)%}, ram at 0xF660: {%ram(0xF660)%} {%ram(0xF43E)%} {%ram(0xF43F)%} {%ram(0xF440)%}"
        set rB $a2
        seti rResult 0

        addi $t1 0
        jzfl continue

        addi $t2 0
        jzfl continue
        //irrdis

    :loop
        add rResult rA rResult
        subi rB 1
        jzfl continue
        jl loop

    :continue
   // irren
        set $rt rResult

        popw $t3 $sp
        popw $t2 $sp
        popw $t1 $SP
        jr $ra

*mul16
    .defreg rA $t1 // byte
    .defreg rB $t2 // byte
    .defreg rResult $t3
    
    :main
        pushw $t1 $sp
        pushw $t2 $sp
        pushw $t3 $sp

        setw rA $a1
        setw rB $a2
        setw rResult $zero

        jwzl $t1 continue
        jwzl $t2 continue

    :loop
        addw rResult rA rResult
        subi rB 1
        jzfl continue
        jl loop

    :continue
   // irren
        setw $rt rResult

        popw $t3 $sp
        popw $t2 $sp
        popw $t1 $SP
        jr $ra

*binToDec
    .defreg value $a1
    .defreg decimalPlacesArg $a2
    .defreg resultPtrArg $a3

    :main
        pushw $ra $sp
        pushw $s1 $sp
        pushw $s2 $sp
        .defreg resultPtr $s1
        .defreg decimalPlaces $s2

        seth value $zero
        setw decimalPlaces decimalPlacesArg
        setw resultPtr resultPtrArg

    // for (byte i = 0; i < decimalPlaces; i++)
    .defreg i $t2; seti i 0;
    :forLoopiCheck
        sub $ass i decimalPlaces
        jnfl forLoopiLogic
        jl clear
    
    :forLoopiLogic
        set $a1 value
        seti $a2 10 
        jasl div.main $ra

        set value $rt
        setloh $rt $rt
        sbramo $rt resultPtr i
    
        addi i 1
        jl forLoopiCheck

    :clear
        popw $s2 $sp
        popw $s1 $sp
        popw $ra $sp
        jr $ra

// R to jest reminder czyli mod
// R := N
// Q := 0
// while R ≥ D do
//   R := R − D
//   Q := Q + 1
// end
// return (R,Q)

*div
    .defreg n $a1
    .defreg d $a2 // 8 bit ale pierwsze 8 bit muszą być 0!!!
    .defreg r $t1
    .defreg q $t2
    .defreg tmp $t3

    :main
        pushw r $sp
        pushw q $sp
        pushw tmp $sp

        sethi d 0
        setw r n
        setw q $zero
        setw tmp $zero
        negw d d

    :loop
        addw tmp r d
        jwnl tmp exit

        set r tmp
        addi q 1

        jl loop

    :exit
        setloh $rt r
        set $rt q
        
        popw tmp $sp
        popw q $sp
        popw r $sp
        jr $ra

*div16
    .defreg n $a1
    .defreg d $a2 // 8 bit ale pierwsze 8 bit muszą być 0!!!
    .defreg r $t1
    .defreg q $t2
    .defreg tmp $t3

    :main
        pushw r $sp
        pushw q $sp
        pushw tmp $sp

        sethi d 0
        setw r n
        setw q $zero
        setw tmp $zero
        negw d d

    :loop
        addw tmp r d
        jwnl tmp exit

        setw r tmp
        addwi q 1

        jl loop

    :exit
        setloh $rt r
        set $rt q
        
        popw tmp $sp
        popw q $sp
        popw r $sp
        jr $ra

*srl16
    .defreg a $a1
    .defreg tmp $t1
    .defreg lsbHi $t2

    :main
        setw tmp a
        seti a 1

        srl tmp tmp $zero
        setloh tmp tmp
        and lsbHi tmp a
        srl tmp tmp $zero
        setloh tmp tmp
        add lsbHi lsbHi $zero
        jzfl clear
        seti lsbHi 0x80
        or tmp tmp lsbHi
    :clear
        setw $rt tmp
        jr $ra

// a1 = bit-length
*getRandomValue
    .defnum defaultSeed 0xf032
    .defreg iterations $a1
    .defreg lfsr $t1
    .defreg lsbHi $t2
    .defreg lsb $t3
    .defreg one $t4

    :main
        lwrami lfsr random.seedPtr
        jwnotzl lfsr mainCnt
        setwi lfsr defaultSeed
    :mainCnt
        seti one 1
        //.debugwrite "Seed to: {lfsr}"
        setw $rt $zero

    :loop
        and lsb lfsr one
      //  .debugwrite "rt: {$rt}"
        // srlw
        srl lfsr lfsr $zero
        setloh lfsr lfsr
        and lsbHi lfsr one
        srl lfsr lfsr $zero
        setloh lfsr lfsr
        add lsbHi lsbHi $zero
        jzfl galiosContinue
        seti $t2 0x80
        or lfsr lfsr $t2

    :galiosContinue
        add lsb lsb $zero
        jzfl outputBitIsZero

        setwi $t2 0x00
        xor lfsr lfsr $t2
        setloh lfsr lfsr
        setwi $t2 0xB4
        xor lfsr lfsr $t2
        setloh lfsr lfsr

    :outputBitIsZero
        subi iterations 1
        jnfl return

        sll $ass $rt $zero
        set $rt $ass

        and $ass lfsr one
        or $ass $ass $rt
        set $rt $ass

        jl loop

    :return
        // lwrami $t1 random.seedPtr
        // addwi $t1 17
        swrami lfsr random.seedPtr
        //.debugwrite "rand: {$rt}"
        jr $ra
