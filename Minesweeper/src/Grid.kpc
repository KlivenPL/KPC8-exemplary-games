*@module Grid
    .exportregion generate
    .exportregion size
    .exportregion getTileIdByGridPos
    .exportregion paintGlobalTile 
    .exportregion revealTile
    .exportregion tileColors
    .exportregion toggleFlag
    .exportregion tiles
    .exportregion setPaletteGlobalTile

*size
    .defnum x 16
    .defnum xNegative -16
    .defnum xMinusArea -176
    .defnum xMinusAreaNegative 176
    .defnum y 12

    .defnum globalX_2x2 40

*tiles
    .defnum basePtr 0x60
    .defnum baseBgPtr 0xF000 // pointer to ram background
    .defnum baseBgAttributePtr 0xF3C0 // pointer to ram attribute table
    .defnum baseBgPalettePtr 0xF5E0 // pointer to ram first palette
    .defnum tileStructSize 1

    .defnum tileDataOffset 0 // byte

    .defnum coveredSSId 160
    .defnum number0SSId 162
    .defnum number1SSId 192
    .defnum bombSSId 166
    .defnum flagSSId 168

    .defnum nearbyBombsCountMask 0b00001111
    .defnum isBombMask 0b01000000
    .defnum isFlagMask 0b00100000
    .defnum isRevealedMask 0b00010000

*tileColors
    .defnum numberPalettesBasePtr 0x200
    .defnum bgPaletteBasePtr 0xF5E0

    .defcolorhex bgColor "#DDDDDD"

    .defnum n0Palette 0x00      .defcolorhex n0ColorA "#BBBBBB" .defcolorhex n0ColorB "#7F7F7F" .defcolorhex n0ColorC "#222222"
    .defnum n1Palette 0x11      .defcolorhex n1ColorA "#003973" .defcolorhex n1ColorB "#4AB5CE" .defcolorhex n1ColorC "#222222"
    .defnum n2Palette 0x22      .defcolorhex n2ColorA "#215A10" .defcolorhex n2ColorB "#5ACE52" .defcolorhex n2ColorC "#222222"
    .defnum n3Palette 0x33      .defcolorhex n3ColorA "#6B0010" .defcolorhex n3ColorB "#E7639C" .defcolorhex n3ColorC "#222222"
    .defnum n4Palette 0x44      .defcolorhex n4ColorA "#42007B" .defcolorhex n4ColorB "#A55AFF" .defcolorhex n4ColorC "#222222"
    .defnum n5Palette 0x55      .defcolorhex n5ColorA "#001084" .defcolorhex n5ColorB "#5A8CFF" .defcolorhex n5ColorC "#222222"
    .defnum n6Palette 0x66      .defcolorhex n6ColorA "#4F3500" .defcolorhex n6ColorB "#CE9C29" .defcolorhex n6ColorC "#222222"
    .defnum n7Palette 0x77      .defcolorhex n7ColorA "#D64AFF" .defcolorhex n7ColorB "#942994" .defcolorhex n7ColorC "#222222"
    .defnum n8Palette 0x88      .defcolorhex n8ColorA "#600000" .defcolorhex n8ColorB "#9C1042" .defcolorhex n8ColorC "#222222"

    .defnum flagPalette 0x99    .defcolorhex flagColorA "#DE7B52" .defcolorhex flagColorB "#222222" .defcolorhex flagColorC "#222222"
    .defnum bombPalette 0xAA    .defcolorhex bombColorA "#DE7B52" .defcolorhex bombColorB "#222222" .defcolorhex bombColorC "#7F7F7F"

    :main
        nop

    .defreg numberPalettesPtr $t1
    :initializeNumberPalettes
        setwi numberPalettesPtr numberPalettesBasePtr

        pushbi n0Palette numberPalettesPtr
        pushbi n1Palette numberPalettesPtr
        pushbi n2Palette numberPalettesPtr
        pushbi n3Palette numberPalettesPtr
        pushbi n4Palette numberPalettesPtr
        pushbi n5Palette numberPalettesPtr
        pushbi n6Palette numberPalettesPtr
        pushbi n7Palette numberPalettesPtr
        pushbi n8Palette numberPalettesPtr
    
    .defreg bgPalettePtr $t1
    :loadPalettes
        setwi bgPalettePtr bgPaletteBasePtr

        pushwi bgColor bgPalettePtr     pushwi n0ColorA bgPalettePtr     pushwi n0ColorB bgPalettePtr    pushwi n0ColorC bgPalettePtr
        pushwi bgColor bgPalettePtr     pushwi n1ColorA bgPalettePtr     pushwi n1ColorB bgPalettePtr    pushwi n1ColorC bgPalettePtr
        pushwi bgColor bgPalettePtr     pushwi n2ColorA bgPalettePtr     pushwi n2ColorB bgPalettePtr    pushwi n2ColorC bgPalettePtr
        pushwi bgColor bgPalettePtr     pushwi n3ColorA bgPalettePtr     pushwi n3ColorB bgPalettePtr    pushwi n3ColorC bgPalettePtr
        pushwi bgColor bgPalettePtr     pushwi n4ColorA bgPalettePtr     pushwi n4ColorB bgPalettePtr    pushwi n4ColorC bgPalettePtr
        pushwi bgColor bgPalettePtr     pushwi n5ColorA bgPalettePtr     pushwi n5ColorB bgPalettePtr    pushwi n5ColorC bgPalettePtr
        pushwi bgColor bgPalettePtr     pushwi n6ColorA bgPalettePtr     pushwi n6ColorB bgPalettePtr    pushwi n6ColorC bgPalettePtr
        pushwi bgColor bgPalettePtr     pushwi n7ColorA bgPalettePtr     pushwi n7ColorB bgPalettePtr    pushwi n7ColorC bgPalettePtr
        pushwi bgColor bgPalettePtr     pushwi n8ColorA bgPalettePtr     pushwi n8ColorB bgPalettePtr    pushwi n8ColorC bgPalettePtr
        pushwi bgColor bgPalettePtr     pushwi flagColorA bgPalettePtr   pushwi flagColorB bgPalettePtr  pushwi flagColorC bgPalettePtr
        pushwi bgColor bgPalettePtr     pushwi bombColorA bgPalettePtr   pushwi bombColorB bgPalettePtr  pushwi bombColorC bgPalettePtr

    :clear
        jr $ra
    
*getTilePtrById
    :main
        pushw $ra $sp
        .defreg tileId $a1

        seti $a2 tiles.tileStructSize
        setw $rt $zero
        jasl Math.mul16.main $ra
        addwi $rt tiles.basePtr
        //.debugwrite "Wyliczony adres dla tileId={tileId} to {$rt}"
        popw $ra $sp
        jr $ra

*getTileIdByGridPos
   :main
        pushw $ra $sp
        .defreg gridPosX $a1
        .defreg gridPosY $a2

        .defreg tmpResult $t1

        // tileId = gridPosY * gridSize.x + gridPosX
        set tmpResult gridPosX

        seti $a1 size.x
        // a2 already set to gridPosY
        jasl Math.mul.main $ra

        add tmpResult $rt tmpResult

        set $rt tmpResult
        popw $ra $sp
        jr $ra

*getTilePtrByGridPos
    :main
        pushw $ra $sp
        .defreg gridPosX $a1
        .defreg gridPosY $a2

        .defreg tileId $t1

        // tileId = gridPosY * gridSize.x + gridPosX
        set tileId gridPosX

        seti $a1 size.x
        // a2 already set to gridPosY
        jasl Math.mul.main $ra

        add $a1 $rt tileId
        seti $a2 tiles.tileStructSize
        setw $rt $zero
        jasl Math.mul16.main $ra
        addwi $rt tiles.basePtr

        popw $ra $sp
        jr $ra

// paints any 2x2 tile, not only game fields
*paintGlobalTile
    .defreg newPaletteId $t4 // passed by $sp
    :main
        popb newPaletteId $sp
        pushw $ra $sp
        .defreg tileX $a1
        .defreg tileY $a2
        .defreg SSId $a3

        .defreg tmpTilemapId $t1
        .defreg tmpSSId $t2

        pushb tileX $sp
        pushb tileY $sp
        
        sethi tileX 0
        sethi tileY 0
        sethi SSId 0
       // nop .debugwrite "Paintuje tile {tileX}x{tileY} na tile ss o id {SSId}"

        // tileAddress = (tileY * globalX_2x2 + tileX) * 2
        setw tmpTilemapId tileX

        setwi $a1 size.globalX_2x2
        // a2 already set to tileY
        jasl Math.mul16.main $ra // tileY * globalX_2x2

        addw $a1 tmpTilemapId $rt
        setwi $a2 2
        jasl Math.mul16.main $ra // (tileY * globalX_2x2 + tileX) * 2

        setw tmpTilemapId $rt
        pushw tmpTilemapId $sp

        setw tmpSSId SSId
        sbramoi tmpSSId tmpTilemapId tiles.baseBgPtr

        addwi tmpSSId 1
        addwi tmpTilemapId 1
        sbramoi tmpSSId tmpTilemapId tiles.baseBgPtr

        addwi tmpSSId 15
        addwi tmpTilemapId 39
        sbramoi tmpSSId tmpTilemapId tiles.baseBgPtr

        addwi tmpSSId 1
        addwi tmpTilemapId 1
        sbramoi tmpSSId tmpTilemapId tiles.baseBgPtr

    :setPalette
        popw attribId $sp // set attribId to tmpTilemapId
        .defreg attribId $t1
        .defreg currPaletteId $t2

        // get attribId by dividing tmpTilemapId/2
        setw $a1 attribId
        jasl Math.srl16.main $ra
        setw attribId $rt

        // get current paletteId
        lbramoi currPaletteId attribId tiles.baseBgAttributePtr

        // paint higher half of tile
        set currPaletteId newPaletteId
        sbramoi currPaletteId attribId tiles.baseBgAttributePtr

        // paint lower half of tile
        addwi attribId 20
        sbramoi currPaletteId attribId tiles.baseBgAttributePtr

    :clear
        popb tileY $sp
        popb tileX $sp
        popw $ra $sp
        jr $ra

*setPaletteGlobalTile
    .defreg tileX $a1
    .defreg tileY $a2
    .defreg newPaletteId $a3
    :main
        pushw $ra $sp
        pushw $fp $sp
        setw $fp $sp

    .defreg attribId $t1
    .defreg paletteId $t2
    :logic
        setw attribId tileX
        setwi $a1 size.globalX_2x2
        // a2 already set to tileY
        jasl Math.mul16.main $ra // tileY * globalX_2x2
        addw attribId attribId $rt

        set paletteId newPaletteId
        // paint upper half of tile
        sbramoi paletteId attribId tiles.baseBgAttributePtr

        // paint lower half of tile
        addwi attribId 20
        sbramoi paletteId attribId tiles.baseBgAttributePtr
        
    :return
        setw $sp $fp
        popw $fp $sp
        popw $ra $sp
        jr $ra

*toggleFlag
    :main
        pushw $ra $sp
        .defreg tileX $a1
        .defreg tileY $a2

        seth $a1 $zero
        seth $a2 $zero
        
        .defreg tilePtr $t1 
        .defreg tileData $t2
        .defreg tileDataMask $t3

        pushb tileX $sp
        pushb tileY $sp

        // getting tilePtr
        jasl getTilePtrByGridPos.main $ra
        setw tilePtr $rt

        popb $a2 $sp // a2 = tileY
        popb $a1 $sp // a1 = tileX

        // getting tile data
        lbramoi tileData tilePtr tiles.tileDataOffset

        // checking is field revealed
        setwi tileDataMask tiles.isRevealedMask
        and tileDataMask tileData tileDataMask
        jzfl toggle

        jl clear // nothing to do, tile is already revealed

    :toggle
        // flip mask flag, but dont store it yet
        xorwi tileData tiles.isFlagMask
        pushb tileData $sp
        pushw tilePtr $sp

        // check if place or delete flag.
        andi tileData tiles.isFlagMask
        jzfl drawCoveredTile

	 :checkIfAnyFlagAvailable
        lbrami flagsCount Gui.stats.flagsCountPtr
        // check if any flag is available
        .defreg flagsCount $t1 
        .defreg bombsCount $t2

        lbrami bombsCount Gui.stats.bombsCountPtr
        sub bombsCount bombsCount flagsCount
        jzfl noFlagsLeft
        jl drawFlag

    :noFlagsLeft
        popw tilePtr $sp
        popb tileData $sp
        jl clear

    :drawFlag
        // store the flag value in ram
        popw tilePtr $sp
        popb tileData $sp
        sbramoi tileData tilePtr tiles.tileDataOffset

        andi tileData tiles.isBombMask
        pushb tileData $sp

        // a1 already set
        // a2 already set
        seti $a3 tiles.flagSSId
        pushbi tileColors.flagPalette $sp
        jasl paintGlobalTile.main $ra

        seti $a1 1
        popb $a2 $sp // pop tileData (was bomb flagged)
        jasl Gui.addFlags.main $ra

        jl clear 

    :drawCoveredTile
        // store the flag value in ram
        popw tilePtr $sp
        popb tileData $sp
        sbramoi tileData tilePtr tiles.tileDataOffset

        andi tileData tiles.isBombMask
        pushb tileData $sp

        // a1 already set
        // a2 already set
        seti $a3 tiles.coveredSSId
        pushbi tileColors.n0Palette $sp
        jasl paintGlobalTile.main $ra

        seti $a1 -1
        popb $a2 $sp // pop tileData (was bomb flagged)
        jasl Gui.addFlags.main $ra

    :clear
        popw $ra $sp
        jr $ra

*revealTile
    :main
        pushw $ra $sp
        .defreg tileX $a1
        .defreg tileY $a2
        .defreg isChainReveal $a3

        seth $a1 $zero
        seth $a2 $zero
        seth $a3 $zero

        .defreg tilePtr $t1 
        .defreg tileData $t2
        .defreg tileDataMask $t3

        // check if position in grid range
        set $t1 tileX
        seti $t2 size.x
        sub $t3 $t2 $t1 
        jzfl clear
        add $t3 $t2 $t1
        jcfl clear
        set $t1 tileY
        seti $t2 size.y
        sub $t3 $t2 $t1 
        jzfl clear
        add $t3 $t2 $t1 
        jcfl clear

        // saving arguments
        pushb tileX $sp
        pushb tileY $sp
        pushb isChainReveal $sp

        // getting tilePtr
        jasl getTilePtrByGridPos.main $ra
        setw tilePtr $rt

        // getting tile data
        lbramoi tileData tilePtr tiles.tileDataOffset

        // restoring arguments
        popb isChainReveal $sp
        popb tileY $sp
        popb tileX $sp

    :checkIfRevealedOrFlag
        // checking is field revealed
        setwi tileDataMask tiles.isRevealedMask
        ori tileDataMask tiles.isFlagMask
        and tileDataMask tileData tileDataMask
        jzfl tryRevealBomb

        jl clear // nothing to do, tile is already revealed

    :tryRevealBomb
        // check if field is a bomb
        setwi tileDataMask tiles.isBombMask
        and tileDataMask tileData tileDataMask
        jzfl tryRevealNumber

        // given field is a bomb. bomb should not be revealed on chain reveal.
        andi isChainReveal 0xFF
        jzfl revealBomb
        jl clear

    :revealBomb
        // reveal the bomb
        // change reveal flag to 1.
        ori tileData tiles.isRevealedMask
        sbramoi tileData tilePtr tiles.tileDataOffset

        // $a1 already set to tileX
        // $a2 already set to tileY
        seti $a3 tiles.bombSSId
        pushbi tileColors.bombPalette $sp
        jasl paintGlobalTile.main $ra
        
        jl clear

    :tryRevealNumber
        // at this moment, field (whatever it is) WILL be revealed. lets change its reveal flag to 1.
        ori tileData tiles.isRevealedMask
        sbramoi tileData tilePtr tiles.tileDataOffset

        // given field is a number. in chain reveal only 0s and fields adjacent do 0s should be revealed
        andwi tileData tiles.nearbyBombsCountMask // leave only 4 LSB of tile data, to get nearby bombs count
        add tileData tileData $zero // test nearby bombs count
        jzfl revealZero // if bombs count is 0, reveal it

        // get the color palette of the tile
        .defreg tileColorPalette $t3
        lbramoi tileColorPalette tileData tileColors.numberPalettesBasePtr

        // given field is not a 0, but other number. reveal it and return.
        addi tileData -1 // -1, as number1SSId starts from 1, not 0
        sll tileData tileData $zero // bombs count *= 2
        addi tileData tiles.number1SSId // number0 sprite + bombs count * 2

        // $a1 already set to tileX
        // $a2 already set to tileY
        set $a3 tileData // a3 = number0 sprite + bombs count * 2
        pushb tileColorPalette $sp
        jasl paintGlobalTile.main $ra

        jl clear

    :revealZero
        // given field is a 0. Reveal it and start (continue) chain reaction
        
        // reveal the zero
        // $a1 already set to tileX
        // $a2 already set to tileY
        seti $a3 tiles.number0SSId
        pushbi tileColors.n0Palette $sp
        jasl paintGlobalTile.main $ra

        // start the chain reaction

        pushb $a1 $sp
        pushb $a2 $sp
        
        // up
        // $a1 already set to tileX
        addi $a2 -1
        seti $a3 0xff // set chain reaction to true
        jasl main $ra

        // right
        addi $a1 1
        addi $a2 1
        seti $a3 0xff // set chain reaction to true
        jasl main $ra

        // down
        addi $a1 -1
        addi $a2 1
        seti $a3 0xff // set chain reaction to true
        jasl main $ra

        // left
        addi $a1 -1
        addi $a2 -1
        seti $a3 0xff // set chain reaction to true
        jasl main $ra

        popb $a2 $sp
        popb $a1 $sp

    :clear
        popw $ra $sp
        jr $ra


*generate
    .defreg difficulty $a1
    .defreg bombsCount $s1
    .defreg tileIndex $s2
    .defreg tmp $t1
    .defreg tilePtr $t2
    .defreg tileData $t3

    :main
        pushw $ra $sp
        pushw $s1 $sp
        pushw $s2 $sp

        seti bombsCount 16
        sethi difficulty 0

        // TEST
        // setw tmp $zero

        // seti tmp 0
        // pushb tmp $sp

        // seti tmp 1
        // pushb tmp $sp

        // seti tmp 14
        // pushb tmp $sp

        // seti tmp 15
        // pushb tmp $sp

        // seti tmp 16
        // pushb tmp $sp

        // seti tmp 48
        // pushb tmp $sp

        // seti tmp 160
        // pushb tmp $sp

        // seti tmp 176
        // pushb tmp $sp


        // seti tmp 31
        // pushb tmp $sp

        // seti tmp 47
        // pushb tmp $sp

        // seti tmp 175
        // pushb tmp $sp

        // seti tmp 191
        // pushb tmp $sp

        // seti tmp 190
        // pushb tmp $sp

        // seti tmp 189
        // pushb tmp $sp

        // seti tmp 177
        // pushb tmp $sp

        // seti tmp 176
        // pushb tmp $sp

        // seti tmp 51
        // pushb tmp $sp

        // setw tmp $zero

        //END TEST

    :loopCalcBombsCount
        subi difficulty 1
        jnfl initializeGuiBombsCount
        sll bombsCount bombsCount $zero
        jl loopCalcBombsCount

    :initializeGuiBombsCount
        pushw $t1 $sp
        set $a1 bombsCount
        jasl Gui.initialize.main $ra
        popw $t1 $sp

    :loopGenBombPos // losujemy pozycje do kazdej z bomb        
        setw tileIndex $zero

// PRZYWROCIC -=-=-=
        setwi $a1 7
        jasl Math.getRandomValue.main $ra
        set tileIndex $rt

        setwi $a1 6
        jasl Math.getRandomValue.main $ra
        add tileIndex tileIndex $rt
// -=-=-=-=-=-=-=-

// test -=-=-=
     //   popb tileIndex $sp
// -=-=-=-=

        // sprawdzamy czy pozycja jest już bombą
        setw $a1 tileIndex
        jasl getTilePtrById.main $ra

        pushw $rt $sp // tilePtr na sp

        lbramoi tileData $rt tiles.tileDataOffset 
        pushb tileData $sp // tileData na sp

        andi tileData tiles.isBombMask
        jzfl markTileAsBomb

        popb tileData $sp
        popw tilePtr $sp
        // nop .debugwrite "Nie moge postawic bomby na tile o id: {tileIndex}, bo bomba juz istnieje"
        jl loopGenBombPos

    :markTileAsBomb
        popb tileData $sp
        popw tilePtr $sp

        ori tileData tiles.isBombMask
        sbramoi tileData tilePtr tiles.tileDataOffset
        // nop .debugwrite "Stawiam bombe na tile o id: {tileIndex}"

    :checkLeftTop
        pushw tileIndex $sp
        addwi tileIndex size.xNegative
        jwnl tileIndex checkTop
        addwi tileIndex size.x // przywroc oryginalny index
        
        setw $a1 tileIndex
        setwi $a2 size.x
        jasl Math.div.main $ra
        setloh tmp $rt
        add tmp tmp $zero
        jzfl checkTop

        // calculate left top index
        subi tileIndex size.x
        subi tileIndex 1

        set $a1 tileIndex
        jasl getTilePtrById.main $ra

        lbramoi tmp $rt tiles.tileDataOffset
        addi tmp 1
        sbramoi tmp $rt tiles.tileDataOffset

        seth tmp $zero
        andi tmp tiles.nearbyBombsCountMask
        // nop .debugwrite "Dodaje licznik bomb LeftTop do pola o id: {tileIndex}. Ma juz w sumie {tmp} bomb"

    :checkTop
        popw tileIndex $sp
        pushw tileIndex $sp

        addwi tileIndex size.xNegative
        jwnl tileIndex checkRightTop
        addwi tileIndex size.x // przywroc oryginalny index

         // calculate top index
        subi tileIndex size.x

        set $a1 tileIndex
        jasl getTilePtrById.main $ra

        lbramoi tmp $rt tiles.tileDataOffset
        addi tmp 1
        sbramoi tmp $rt tiles.tileDataOffset

        seth tmp $zero
        andi tmp tiles.nearbyBombsCountMask
        // nop .debugwrite "Dodaje licznik bomb Top do pola o id: {tileIndex}. Ma juz w sumie {tmp} bomb"

    :checkRightTop
        popw tileIndex $sp
        pushw tileIndex $sp

        addwi tileIndex size.xNegative
        jwnl tileIndex checkRight
        addwi tileIndex size.x // przywroc oryginalny index

        setw $a1 tileIndex
        addi $a1 1
        setwi $a2 size.x
        jasl Math.div.main $ra
        setloh tmp $rt
        add tmp tmp $zero
        jzfl checkRight

         // calculate right top index
        subi tileIndex size.x
        addi tileIndex 1

        set $a1 tileIndex
        jasl getTilePtrById.main $ra

        lbramoi tmp $rt tiles.tileDataOffset
        addi tmp 1
        sbramoi tmp $rt tiles.tileDataOffset

        seth tmp $zero
        andi tmp tiles.nearbyBombsCountMask
        // nop .debugwrite "Dodaje licznik bomb RightTop do pola o id: {tileIndex}. Ma juz w sumie {tmp} bomb"

    :checkRight
        popw tileIndex $sp
        pushw tileIndex $sp

        setw $a1 tileIndex
        addi $a1 1
        setwi $a2 size.x
        jasl Math.div.main $ra
        setloh tmp $rt
        add tmp tmp $zero
        jzfl checkRightBot

         // calculate right index
        addi tileIndex 1

        set $a1 tileIndex
        jasl getTilePtrById.main $ra

        lbramoi tmp $rt tiles.tileDataOffset
        addi tmp 1
        sbramoi tmp $rt tiles.tileDataOffset

        seth tmp $zero
        andi tmp tiles.nearbyBombsCountMask
        // nop .debugwrite "Dodaje licznik bomb Right do pola o id: {tileIndex}. Ma juz w sumie {tmp} bomb"

    :checkRightBot
        popw tileIndex $sp
        pushw tileIndex $sp

        addwi tileIndex size.xMinusArea
        jwnotnl tileIndex checkBot
        addwi tileIndex size.xMinusAreaNegative // przywroc oryginalny index

        setw $a1 tileIndex
        addi $a1 1
        setwi $a2 size.x
        jasl Math.div.main $ra
        setloh tmp $rt
        add tmp tmp $zero
        jzfl checkBot

         // calculate right bot index
        addi tileIndex size.x
        addi tileIndex 1

        set $a1 tileIndex
        jasl getTilePtrById.main $ra

        lbramoi tmp $rt tiles.tileDataOffset
        addi tmp 1
        sbramoi tmp $rt tiles.tileDataOffset

        seth tmp $zero
        andi tmp tiles.nearbyBombsCountMask
        // nop .debugwrite "Dodaje licznik bomb RightBot do pola o id: {tileIndex}. Ma juz w sumie {tmp} bomb"

    :checkBot
        popw tileIndex $sp
        pushw tileIndex $sp

        addwi tileIndex size.xMinusArea
        jwnotnl tileIndex checkLeftBot
        addwi tileIndex size.xMinusAreaNegative // przywroc oryginalny index

         // calculate bot index
        addi tileIndex size.x

        set $a1 tileIndex
        jasl getTilePtrById.main $ra

        lbramoi tmp $rt tiles.tileDataOffset
        addi tmp 1
        sbramoi tmp $rt tiles.tileDataOffset

        seth tmp $zero
        andi tmp tiles.nearbyBombsCountMask
        // nop .debugwrite "Dodaje licznik bomb Bot do pola o id: {tileIndex}. Ma juz w sumie {tmp} bomb"

    :checkLeftBot
        popw tileIndex $sp
        pushw tileIndex $sp

        addwi tileIndex size.xMinusArea
        jwnotnl tileIndex checkLeft
        addwi tileIndex size.xMinusAreaNegative // przywroc oryginalny index

        setw $a1 tileIndex
        setwi $a2 size.x
        jasl Math.div.main $ra
        setloh tmp $rt
        add tmp tmp $zero
        jzfl checkLeft

         // calculate left bot index
        addi tileIndex size.x
        subi tileIndex 1

        set $a1 tileIndex
        jasl getTilePtrById.main $ra

        lbramoi tmp $rt tiles.tileDataOffset
        addi tmp 1
        sbramoi tmp $rt tiles.tileDataOffset

        seth tmp $zero
        andi tmp tiles.nearbyBombsCountMask
        // nop .debugwrite "Dodaje licznik bomb LeftBot do pola o id: {tileIndex}. Ma juz w sumie {tmp} bomb"
        
    :checkLeft
        popw tileIndex $sp

        setw $a1 tileIndex
        setwi $a2 size.x
        jasl Math.div.main $ra
        setloh tmp $rt
        add tmp tmp $zero
        jzfl continue

         // calculate left index
        subi tileIndex 1

        set $a1 tileIndex
        jasl getTilePtrById.main $ra

        lbramoi tmp $rt tiles.tileDataOffset
        addi tmp 1
        sbramoi tmp $rt tiles.tileDataOffset

        seth tmp $zero
        andi tmp tiles.nearbyBombsCountMask
        // nop .debugwrite "Dodaje licznik bomb Left do pola o id: {tileIndex}. Ma juz w sumie {tmp} bomb"

    :continue
        subi bombsCount 1
        jzfl exit
        jl loopGenBombPos
    
    :exit
        popw $s2 $sp
        popw $s1 $sp
        popw $ra $sp
        jr $ra