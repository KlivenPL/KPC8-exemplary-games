*@module Gui
    .exportregion initialize
    .exportregion stats
    .exportregion addFlags
    .exportregion showEndGameBox
    .exportregion setFrontendTime

*stats
    .defnum bombsCountPtr 0x250 // byte
    .defnum flagsCountPtr 0x251 // byte
    .defnum timePtr 0x252 // word
    .defnum scorePtr 0x254 // word
    .defnum flaggedBombsCountPtr 0x256 // byte
    .defnum gameOverPtr 0x257 // byte

*frontendStats
    .defnum number0SSPtr 16
    .defnum bombsCountDigit0Ptr 0xF139 // 0xF000 + 313
    .defnum bombsCountDigit1Ptr 0xF13A // 0xF000 + 314

    // time MM:SS
    .defnum timeDigitS0Ptr 0xF1DD // 0xF000 + 473
    .defnum timeDigitS1Ptr 0xF1DC // 0xF000 + 474
    .defnum timeDigitM0Ptr 0xF1DA // 0xF000 + 476
    .defnum timeDigitM1Ptr 0xF1D9 // 0xF000 + 477

    .defnum finalTextPtr 0xF19C // 0xF000 + 412
    .defnum finalTextAttribPtr 0xF48E //0xF3C0 + 412/2
    
*byteToDec
    .defreg value $a1
    .defreg resultPtrArg $a2 // pointer to byte[3]

    :main
        pushw $ra $sp
        pushw $s1 $sp
        .defreg tmp1 $t1
        .defreg resultPtr $s1

        seth value $zero
        setw resultPtr resultPtrArg

        // ones
        set $a1 value
        seti $a2 10 
        jasl Math.div.main $ra

        set value $rt
        swaploh $rt tmp1
        pushb tmp1 resultPtr

        // tens
        // a1 already set
        seti $a2 10 
        jasl Math.div.main $ra

        set value $rt
        swaploh $rt tmp1
        pushb tmp1 resultPtr
        
        // hundreds
        // a1 already set
        seti $a2 10
        jasl Math.div.main $ra

        set value $rt
        swaploh $rt tmp1
        pushb tmp1 resultPtr

    :clear
        popw $s1 $sp
        popw $ra $sp
        jr $ra

*setFrontendTime // interrupt safe
    .defreg newTimeArg $a1
    .defreg newTime $s1
    :main
        pushw $ra $sp
        pushw $fp $sp
        
        pushw $t1 $sp
        pushw $t2 $sp
        pushw $t3 $sp
        pushw $t4 $sp
        pushw $s1 $sp
        pushw $s2 $sp
        pushw $s3 $sp
        pushw $a1 $sp
        pushw $a2 $sp
        pushw $a3 $sp
        pushw $rt $sp

        setw $fp $sp

    .defnum sDisp0Offset 0 // byte
    .defnum sDisp1Offset 1 // byte
    .defnum mDisp0Offset 2 // byte
    .defnum mDisp1Offset 3 // byte
    :initialize
        setw newTime newTimeArg
        addwi $sp 4

    .defreg time $t1
    .defreg tmpVar2 $t2
    :logic
        // divide the seconds by 60 to get the minutes
        setw $a1 newTime
        seti $a2 60 
        jasl Math.div16.main $ra
        // now, $rt_lo = minutes, $rt_hi = seconds

        setloh time $rt // store the time and set time_lo to seconds 

        set $a1 $rt
        seti $a2 2
        setwi tmpVar2 mDisp0Offset
        addw $a3 $fp tmpVar2
        jasl Math.binToDec.main $ra

        set $a1 time
        seti $a2 2
        setwi tmpVar2 sDisp0Offset
        addw $a3 $fp tmpVar2
        jasl Math.binToDec.main $ra

        lbramoi time $fp mDisp0Offset
        addi time 16
        sbramoi time $zero frontendStats.timeDigitM0Ptr

        lbramoi time $fp mDisp1Offset
        addi time 16
        sbramoi time $zero frontendStats.timeDigitM1Ptr

        lbramoi time $fp sDisp0Offset
        addi time 16
        sbramoi time $zero frontendStats.timeDigitS0Ptr

        lbramoi time $fp sDisp1Offset
        addi time 16
        sbramoi time $zero frontendStats.timeDigitS1Ptr

    :return
        setw $sp $fp

        popw $rt $sp
        popw $a3 $sp
        popw $a2 $sp
        popw $a1 $sp
        popw $s3 $sp
        popw $s2 $sp
        popw $s1 $sp
        popw $t4 $sp
        popw $t3 $sp
        popw $t2 $sp
        popw $t1 $sp

        popw $fp $sp
        popw $ra $sp
        jr $ra

*showEndGameBox
    .defreg textPtr $a1
    :main
        pushw $ra $sp
        pushw $fp $sp
        setw $fp $sp

    .defreg letter $t1
    .defreg i $t2
    .defreg textPalette $t3
    :logic
        irrdis // turn off timer, its game over.
        seti $t1 1
        sbramoi $t1 $zero stats.gameOverPtr // set game over to true
        setwi letter 0
        setwi i 0
        setwi textPalette Grid.tileColors.textPalette

    :writeTextLoop
        lbromo letter i textPtr
        jwzl letter return

        subi letter 32
        sbramoi letter i frontendStats.finalTextPtr
        pushb i $sp
        srl i i $zero
        sbramoi textPalette i frontendStats.finalTextAttribPtr
        popb i $sp

        addi i 1
        jl writeTextLoop

    :return
        setw $sp $fp
        popw $fp $sp
        popw $ra $sp
        jr $ra

*initialize
    .defreg bombsCountArg $a1
    :main
        pushw $ra $sp
        pushw $s1 $sp
        pushw $s2 $sp
        setw $fp $sp
        .defreg bombsCount $t1
        set bombsCount bombsCountArg
        
        sbramoi bombsCount $zero stats.bombsCountPtr

        pushb $zero $sp
        pushb $zero $sp
        pushb $zero $sp

        // $a1 already set
        setw $a2 $fp
        jasl byteToDec.main $ra

        popb $zero $sp
        popb $t2 $sp
        popb $t3 $sp

        addi $t3 frontendStats.number0SSPtr
        addi $t2 frontendStats.number0SSPtr

        sbramoi $t2 $zero frontendStats.bombsCountDigit0Ptr
        sbramoi $t3 $zero frontendStats.bombsCountDigit1Ptr

        // set gui background
        // for (byte tileX = 16; tileX < 20; tileX++)
        .defreg tileX $s1; seti tileX 16;
        :forLooptileXCheck
            cmpsubi tileX 20
            jnfl forLooptileXLogic
            jl forLooptileXExit
        
        :forLooptileXLogic
            // for (byte tileY = 0; tileY < 12; tileY++)
            seti tileY 0; .defreg tileY $s2;
            :forLooptileYCheck
                cmpsubi tileY 12
                jnfl forLooptileYLogic
                jl forLooptileYExit
            
            :forLooptileYLogic
                set $a1 $s1
                set $a2 $s2
                seth $a1 $zero
                seth $a2 $zero
                nop .debugwrite "({$a1}, {$a2})"
                seti $a3 Grid.tileColors.flagPalette
                jasl Grid.setPaletteGlobalTile.main $ra

                addi tileY 1
                jl forLooptileYCheck
            
            :forLooptileYExit
                nop // TODO
        
            addi tileX 1
            jl forLooptileXCheck
        
        :forLooptileXExit
            nop // TODO

    :clear
        popw $s2 $sp
        popw $s1 $sp
        popw $ra $sp
        jr $ra

*addFlags
    .defreg deltaFlagsCountArg $a1
    .defreg wasBombFlaggedArg $a2
    :main
        pushw $ra $sp
        pushw $fp $sp
        setw $fp $sp

        .defnum deltaFlagsCountOffset 0
        .defnum wasBombFlaggedOffset 1
        .defnum bombCountOffset 2

        pushb deltaFlagsCountArg $sp
        pushb wasBombFlaggedArg $sp
        pushbi 0 $sp

        .defreg flagCount $t1
        .defreg bombCount $t2

        lbrami flagCount stats.flagsCountPtr
        add flagCount flagCount deltaFlagsCountArg
        sbramoi flagCount $zero stats.flagsCountPtr

    :displayFrontendBombsLeft
        lbrami bombCount stats.bombsCountPtr
        sbramoi bombCount $fp bombCountOffset
        sub bombCount bombCount flagCount

        set $a1 bombCount
        setw $a2 $sp
        pushb $zero $sp
        pushb $zero $sp
        pushb $zero $sp
        jasl byteToDec.main $ra
        .defreg tens $t1
        .defreg ones $t2
        popb $zero $sp
        popb tens $sp
        popb ones $sp

        addi tens frontendStats.number0SSPtr
        addi ones frontendStats.number0SSPtr

        sbramoi tens $zero frontendStats.bombsCountDigit0Ptr
        sbramoi ones $zero frontendStats.bombsCountDigit1Ptr

    .defreg deltaFlagsCount $t1
    .defreg wasBombFlagged $t2
    .defreg flaggedBombsCount $t3
    :changeFlaggedBombsCount
        lbramoi wasBombFlagged $fp wasBombFlaggedOffset
        andi wasBombFlagged 0xff
        jzfl clear

        // update flagged bombs count
        lbramoi deltaFlagsCount $fp deltaFlagsCountOffset
        lbrami flaggedBombsCount stats.flaggedBombsCountPtr
        add flaggedBombsCount flaggedBombsCount deltaFlagsCount
        sbramoi flaggedBombsCount $zero stats.flaggedBombsCountPtr
        nop .debugwrite "Oznaczone prawdziwe bomby: {flaggedBombsCount}"

        lbramoi bombCount $fp bombCountOffset
        sub $ass flaggedBombsCount bombCount
        jzfl allBombsFlagged
        jl clear

    :allBombsFlagged
        setwi $a1 @const.youWinTextPtr
        jasl showEndGameBox.main $ra

    :clear
        setw $sp $fp
        popw $fp $sp
        popw $ra $sp
        jr $ra