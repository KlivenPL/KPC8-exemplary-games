*@module Game
    .exportregion initialize

*cursor
    .defnum spritePtr 0xF660
    .defnum posXGridPtr 0x10
    .defnum posYGridPtr 0x11


*initialize
    .defreg difficultyLevel $a1
    :main
        sethi difficultyLevel 0
        pushb difficultyLevel $sp // store difficulty level

*setupGameTimer
    .defnum nTimerAddr 0x0
    .defnum nTimerIrrConf 0xFF // translates to 0x0F interrupt code
    .defnum nTimerFreqConf 1

    .defreg rAddress $t1
    .defreg rValue $t2

    :main
        setwi rAddress nTimerAddr

        setwi rValue nTimerIrrConf
        sbext rValue rAddress

        seti rValue nTimerFreqConf
        sbext rValue rAddress

*setGamePalette
    .defnum spritePaletteAddr 0xF5A0
    .defreg spritePalettePtr $t1
    .defcolorrgb spriteBgColor 0 0 0
    .defcolorrgb spriteColor1 255 0 0
    .defcolorrgb spriteColor2 0 0 255
    .defcolorrgb spriteColor3 0 255 0
    :main
        // set the palette for the cursor
        setwi spritePalettePtr spritePaletteAddr
        pushwi spriteBgColor spritePalettePtr     pushwi spriteColor1 spritePalettePtr     pushwi spriteColor2 spritePalettePtr    pushwi spriteColor3 spritePalettePtr

        jasl Grid.tileColors.main $ra

*setGameTilemap
    .defreg rValue $t1 
    .defreg rCurrValuePtr $s1
    .defreg rGametileMaxPtr $t3
    .defreg rOffset $t4
    .defnum nOffset 0x3c2

    :main
        setwi rOffset nOffset
        setwi rCurrValuePtr 0xF000
        setwi rGametileMaxPtr 0xC40

    :loop
        lwromo rValue rCurrValuePtr rOffset
        swram rValue rCurrValuePtr

        addwi rCurrValuePtr 2
        addw $t2 rGametileMaxPtr rCurrValuePtr
        jwzl $t2 paintGameSprites.main
        jl loop

*paintGameSprites
    .defnum nOemAddr 0xF660
    .defnum nSelectorATileId 164
    .defnum nSelectorBTileId 165
    .defnum nSelectorCTileId 181
    .defnum nSelectorDTileId 180

    .defnum nSelectorAPosX 0x1000
    .defnum nSelectorAPosY 0
    .defnum nSelectorBPosX 0x1000
    .defnum nSelectorBPosY 0
    .defnum nSelectorCPosX 0x1000
    .defnum nSelectorCPosY 0
    .defnum nSelectorDPosX 0x1000
    .defnum nSelectorDPosY 0

    .defreg rValue $t2
    .DEFREG rOemAddr $t3

    :main
        setwi rOemAddr nOemAddr

        seti rValue nSelectorATileId
        pushb rValue rOemAddr

        setwi rValue nSelectorAPosX
        pushw rValue rOemAddr

        seti rValue nSelectorAPosY
        pushb rValue rOemAddr

        seti rValue nSelectorBTileId
        pushb rValue rOemAddr

        setwi rValue nSelectorBPosX
        pushw rValue rOemAddr

        seti rValue nSelectorBPosY
        pushb rValue rOemAddr

        seti rValue nSelectorCTileId
        pushb rValue rOemAddr

        setwi rValue nSelectorCPosX
        pushw rValue rOemAddr

        seti rValue nSelectorCPosY
        pushb rValue rOemAddr

        seti rValue nSelectorDTileId
        pushb rValue rOemAddr

        setwi rValue nSelectorDPosX
        pushw rValue rOemAddr

        seti rValue nSelectorDPosY
        pushb rValue rOemAddr

*gameInitialization
    :main
        setwi $a1 cursor.spritePtr
        seti $a2 0
        seti $a3 0
        jasl moveSelector.main $ra

        popb $a1 $sp // restore difficultyLevel
        jasl Grid.generate.main $ra

        irren

*mainGameLoop
    :main
        jasl Input.getInputDown.main $ra
        set $a1 $rt
        jasl handleInput.main $ra

        jl main

// *generateBombs
//     .defnum difficulty $t1

//     :main


*handleInput
    .defreg input $a1
    .defreg inputMask $t1
    .defreg inputMatch $t2
    .defreg rPosXGrid $s1
    .defreg rPosYGrid $s2
    
    :main
        pushw $s1 $sp
        pushw $s2 $sp
        pushw $ra $sp

        setwi $t1 cursor.posXGridPtr
        lbram rPosXGrid $t1

        setwi $t1 cursor.posYGridPtr
        lbram rPosYGrid $t1


    :checkMoveUp
        seti inputMask Input.kpad.up
        and inputMatch input inputMask
        jzfl handleInput.checkMoveRight
        
        subi rPosYGrid 1

        setwi $a1 cursor.spritePtr
        set $a2 rPosXGrid
        set $a3 rPosYGrid
        jasl moveSelector.main $ra
        
        popw $ra $sp
        popw $s2 $sp
        popw $s1 $sp
        jr $ra

    :checkMoveRight
        seti inputMask Input.kpad.right
        and inputMatch input inputMask
        jzfl handleInput.checkMoveDown
        
        addi rPosXGrid 1

        setwi $a1 cursor.spritePtr
        set $a2 rPosXGrid
        set $a3 rPosYGrid
        jasl moveSelector.main $ra

        popw $ra $sp
        popw $s2 $sp
        popw $s1 $sp
        jr $ra

    :checkMoveDown
        seti inputMask Input.kpad.down
        and inputMatch input inputMask
        jzfl handleInput.checkMoveLeft

        addi rPosYGrid 1

        setwi $a1 cursor.spritePtr
        set $a2 rPosXGrid
        set $a3 rPosYGrid
        jasl moveSelector.main $ra

        popw $ra $sp
        popw $s2 $sp
        popw $s1 $sp
        jr $ra

    :checkMoveLeft
        seti inputMask Input.kpad.left
        and inputMatch input inputMask
        jzfl handleInput.checkAButton

        subi rPosXGrid 1
        setwi $a1 cursor.spritePtr
        set $a2 rPosXGrid
        set $a3 rPosYGrid
        jasl moveSelector.main $ra

        popw $ra $sp
        popw $s2 $sp
        popw $s1 $sp
        jr $ra

    :checkAButton
        seti inputMask Input.kpad.a
        and inputMatch input inputMask
        jzfl handleInput.checkBButton

        setw $a1 rPosXGrid
        setw $a2 rPosYGrid
        seti $a3 0

        jasl Grid.revealTile.main $ra

    :checkBButton
        seti inputMask Input.kpad.b
        and inputMatch input inputMask
        jzfl handleInput.clear

        setw $a1 rPosXGrid
        setw $a2 rPosYGrid

        jasl Grid.toggleFlag.main $ra
    
    :clear
        popw $ra $sp
        popw $s2 $sp
        popw $s1 $sp
        jr $ra

// a1 = selectorSpriteAPtr
// a2 = posX in grid coords
// a3 = posY in grid coords
*moveSelector
    .defreg rSelectorSpriteAPtr $a1  // word
    .defreg rPosXGrid $a2            // byte
    .defreg rPosYGrid $a3            // byte

    .defreg rPosXPixel $t1
    .defreg rPosYPixel $t2

    :main
        pushw $ra $sp
        setw $t3 rSelectorSpriteAPtr

        // check if position in grid range
        set $t1 rPosXGrid
        seti $t2 Grid.size.x
        sub $zero $t2 $t1 
        jzfl clear
        add $zero $t2 $t1 
        jcfl clear

        set $t1 rPosYGrid
        seti $t2 Grid.size.y
        sub $zero $t2 $t1 
        jzfl clear
        add $zero $t2 $t1 
        jcfl clear

        pushw $t3 $sp

        // save Grid pos
        setwi $t1 cursor.posXGridPtr
        sbram rPosXGrid $t1 

        setwi $t1 cursor.posYGridPtr
        sbram rPosYGrid $t1

        seti $a1 16
        jasl Math.mul.main $ra
        set rPosXPixel $rt

        seti $a1 16
        set $a2 rPosYGrid
        jasl Math.mul.main $ra
        set rPosYPixel $rt

        popw $t3 $sp

        // left upper corner
        addwi $t3 2
        pushb rPosXPixel $t3
        pushb rPosYPixel $t3

        // right upper corner
        addwi $t3 2
        addi rPosXPixel 8
        pushb rPosXPixel $t3
        pushb rPosYPixel $t3

        // right lower corner
        addwi $t3 2
        addi rPosYPixel 8
        pushb rPosXPixel $t3
        pushb rPosYPixel $t3

        // left lower corner
        addwi $t3 2
        subi rPosXPixel 8
        pushb rPosXPixel $t3
        pushb rPosYPixel $t3

    :clear
        popw $ra $sp 
        jr $ra